System.Thread
	Main이 주 Thread가 되고, 다른 Thread를 생성하여 동시 수행을 실행함.
	Thread는 각자의 메모리영역이 있어, Local 변수도 분리되어 공유하지 않는다.
	단, 동일한 object instance를 참조할 경우는 값을 공유한다.
		 Program prg1 = new Program();

         new Thread(prg1.DoWork2).Start(); // 내부적으로 변수값이 변경이 되면 아래 수행되는 method에 영향을 줌.
         prg1.DoWork2();
	
	ThreadStart threadStart = DoWork;
	Thread thread = new Thread(threadStart);
	thread.Start();

	// new Thread(DoWork).Start()
	
Thread관리
	Join()
		Join()을 만나면 해당 thread가 종료될 때 까지 기다리고 다음이 수행된다.
		Join()이 없고, Main Thread가 끝나버리면 task thread가 수행이 완전히 된다는 보장이 없다.
	
	기본적으로 Thread는 foreground로 수행이됨. process는 모든 foreground thread가 끝나면 종료가 됨.
	IsBackground 속성을 이용하여 background로 수행할 수 있지만, background thread가 수행중이여도 프로세스는
	종료될 수 있음.
	
	thread에는 우선순위를 지정할 수 있다. ThreadPriority 열거형 type으로 지정
	종류에는 Lowest, BelowNormal, Normal, AboveNormal, Highest가 있다.
	우선순위를 잘못지정하면 낮은 우선순위의 thread가 수행되지못하고 대기하는 상황이 발생할 수 있다.

	Thread가 활성상태인지는 IsAlive 속성으로 확인 가능.
	자세한 상태는 ThreadState 속성으로 확인 가능.
	속성의 값은 ThreadState 열거형 값으로 확인.
	값으로는 Aborted, Abort, Requested, Background, Running, Stopped, StopRequested, Suspended,
    SuspendRequested, Unstarted, and WaitSleepJoin. 
	해당 열거형은 flag속성을 가지고 있고, 여러 속성이 조합될 수 도 있다.


Sleep() and Abort()
	Thread를 관리하는데 남용되고 있는 method

	Sleep()
		Sleep은 현재 Thread를 일정 시간동안 중지시킴.
		하지만, 그 시간이 지난 후 깨어난 사이에 발생하는 일에 대해서는 보증하지 않음.
		Sleep은 다른 thread가 끝난 후에 진행이 되어야 할 때 종종 사용되지만 더 좋은 방법이 있음.
		Sleep테스트시에 장시간 대기가 필요한 시뮬레이션이 필요할 때 사용.

	Abort()
		thread를 강제로 중단시킬 때 사용하지만(ThreadAbordException 발생), 강제 종료는 좋지 않음.
			Abort를 중단하려고 시도만 할 뿐 중단된다는 보장이 없음.
			중단되는 thread가 lock문으로 보호된 중요한 thread일 수 있음.
			내부 Data구조가 손상될 수 있음.

Thread Pooling
	Thread는 값비싼 자원으로 생성하고, 전환하고 소멸하는데 많은 Resouce를 사용함.
	이를 방지하기 위해 Thread Pool에 이미 Thread를 만들어 놓고 사용이 끝나면 반환하는 형태로 사용.
	Thread의 갯수를 유지하여 시스템 부담을 줄이며, 할당되지 않은 작업은 대기하고 있다 pool에 thread가 반환되면 
	할당하여 작업 시작
	threadpool에 할당되는 작업은 짧은 시간(밀리세컨드나 초)에 끝나는 작업과 주 thread나 다른 thead와 동기화가 필요없는 작업

	public static void DoWork(object str)
        {
            for (int i = 0; i < repetition; i++)
            {
                Console.Write(str);
            }
        }
        static void Main(string[] args)
        {
            ThreadPool.QueueUserWorkItem(DoWork, "+");
            Thread.Sleep(10000);
        }
비동기 작업
	비동기 작업의 복잡도
		각 작업이 종료가 되었는지 확인 :  polling이나 block, waiting은 좋지 않은 방법임.
		스레드 풀링 : 스레드를 시작하고 끊는 데 드는 상당한 비용을 피합니다. 스레드를 전환 시간을 절약하고, 너무 많은 스레드를 생성하는 것을 방지합니다. 
		교착 상태 방지 : 두 개의 다른 스레드가 동시에 액세스 할 수 없도록 데이터를 보호하려고 시도하는 동안 교착 상태가 발생하는 것을 방지해야 함.
		작업 전반에 걸쳐 원 자성 제공 및 데이터 액세스 동기화 : 작업 그룹에 동기화를 추가하면 작업이 단일 단위로 실행되고 다른 스레드에 의해 적절히 중단됩니다. 
		두 개의 다른 스레드가 동시에 데이터에 액세스하지 못하도록 잠금이 제공됩니다.
		
	오래 수행되는 job을 비동기 수행하기 위한 TAP(Task-based Asyncronous Pattern)구현을 위해서 TPL의 async / await와 같은 
    keyword가 5.0부터 추가됨.


From Thread to Task
	Thread를 새로 만드는 것은 많은 양의 가상 메모리(최소 1mb)를 생성함.
	Thread pool을 이용하여 효율적으로 thread를 관리할 수 있음.
	.NET 4.0부터는 비동기 작업이 필요하면 Thread를 만들는 것이 아니라 TPL을 이용하여 task를 생성하고 task scheduler에게
	비동기 작업이 있음을 알림.
	Task Scheduler는 여러가지 전략(Thread pool도 한가지 방법임)을 이용하여 Task를 처리함. 비동기 작업들은 Task객체로 변환이 되어 여러 API를 제공할 수 있음.
	Delegate는 작업이 진행되다가 delegate로 전환이 될때 동기식으로 진행이 되지만 task는 비동기로 진행이 됨.


Task
	Task.Run(Action) 형태로 작성을 하며, 일반 delegate 동기처리가 되지만, Task는 비동기로 처리가 됨.
	Task내부에서 Thread polling을 통해서 Thread를 얻어 비동기 수행을 처리함.

	Task task = Task.Run(() =>
            {
                for (int i = 0; i < repetition; i++)
                {
                    Console.Write("+");

                }
            });

    task.Wait() // 해당 Task가 끝날 때까지 wait

	동시에 여러개의 task를 만들어서 수행할 수 있으며 모든 task가 끝날때까지 기다리기 위해서는 Task.WaitAll(Task[] tasks) 사용

	Task.WaitAll(new []{task1, task2});

	Return이 있는 비동기 처리는 Task<T>(Func)를 사용

	Task<string> task1 = Task<string>.Run(() =>
            {
                Thread.Sleep(10000);
                return "Done task1";
            });
	Console.WriteLine(task1.Result);

Task의 유용한 Property
 IsCompleted Property
	Task의 종료여부를 나타냄. 성공인지 실패인지는 관계없음.
	Task의 상세한 상태는 Status Property로 확인.(TaskStatus 열거형 Type)
	Created, WaitingForActivation, WaitingToRun, Running, WaitingForChildrenToComplete,
    RanToCompletion, Canceled, and Faulted  
	위 상태중 IsCompleted가 true인 경우는 RanToCompletion, Canceled, Faulted 

CurrentId 
	각 task마다 부여되는 고유 ID, Debug시 유용함
AsyncState
	Task의 추가적인 정보로 예를 들면 List의  index정보.

Task Continuation
	Continuation이란 제어의 흐름속에서 다음에 일어날 일
	Task의 ContinuWith()를 이용하여 task의 후속 작업을 지정할 수 있음.

	static void Main(string[] args)
        {
            Console.WriteLine("Before");

            Task taskA = Task.Run(() =>
            {
                Console.WriteLine("Start A...");
            }).ContinueWith(ancent =>
            {
                Console.WriteLine("Start A child...");
            });

            Task taskB = taskA.ContinueWith( ancent =>
            {
                Console.WriteLine("Start B ...");
            });

            Task taskC = taskA.ContinueWith(ancent =>
            {
                Console.WriteLine("Start C ...");
            });

            Task.WaitAll(taskA, taskB, taskC);
            Console.WriteLine("Finished");

        }

	taskA가 종료된 후에 taskA의 ContinueWith를 통해 호출된 Task들이 동시에 수행이 된다.
	선행작업이 후행작업의 인수로 전달이 됨.
	taskB와 taskC는 동시에 수행이 되지만 어느 것이 먼저 수행이 되는지는 보증할 수 없음.
	ContinueWith의 두번째 인수로 사용할 수 있는 TaskContinuationOptions 종류

	None
		Default값으로 선행 task가 Complete되면 후행 task가 수행.
	PreferFairness
		두개의 task가 동시에 시작이 되었을 때 먼저 시작된 task가 먼저 수행이 되도록.
		서로다른 thread poll을 사용했을 때 유용.
	LongRunning
		I/O관련 대기시간이 많은 Task임을 스케쥴러에게 알려줌. 그러면 다른 Task들이 대기됨.
		자주 사용하지 않도록.
	NotOnRanToCompletion
	NotOnFaulted
	OnlyOnCanceled
	NotOnCanceled
	OnlyOnFaulted
	OnlyOnRanToCompletion
	ExecuteSynchronously
		후행 Task가 선행Task와 동일한 Thread에서 수행이 됨.
	LazyCancellation
		t1, t2, t3가 순서대로 수행이 되는 task일경우 t1실행 중 t2가 cancel이되면 t3가 수행이 될 수 있음.
		이것을 막아주는 option

	Task taskA = Task.Run(() =>
            {
                Console.WriteLine("Start A...");
                throw new ArgumentException();
            });

            Task taskB = taskA.ContinueWith( ancent =>
            {
                Console.WriteLine("Completed");
            }, TaskContinuationOptions.OnlyOnRanToCompletion);

            Task taskC = taskA.ContinueWith(ancent =>
            {
                Console.WriteLine("Faulted");
            }, TaskContinuationOptions.OnlyOnFaulted);

            taskB.Wait();
            Console.WriteLine("Finished");
			Console.WriteLine(taskC.Status);
		
	taskA가 완료 후 Option에 의해서 수행이 되지 않는 Task는 취소 처리가됨.
	taskC는  취소가 되기때문에 Wait()을 사용하면 에러가 발생함.

AggregateException
	Task에서 Exception이 발생을 하면 내부에서 어떤 Exception이 발생하더라도 
	AggregateExcption으로 발생을 시킴.
	Exception 처리과정에서 Handler를 통해서 실제 발생한 Exception을 알아낼 수 있음.

	Task taskA = Task.Run(() =>
            {
                Console.WriteLine("Start A...");
                throw new InvalidOperationException();
            });

            try {
                taskA.Wait();
            } catch (AggregateException ex)
            {
                ex.Handle(exception =>
                {
                    Console.WriteLine(exception.GetType());
                    return true;
                });
            }