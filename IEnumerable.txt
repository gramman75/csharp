. IEnumerable
	. Net에서 Collection이 되기 위해서는 최소한 IEnumerable을 구현해야 함.
	. IEnumerable을 구현하면 foreach를 사용하여 Collection을 탐색할 수 있음.
	. foreach문은 Compile시에 for문으로 대체 됨.
	. Array와 같이 길이를 알 수 없는 경우는 NextNext()와 같은 함수로 Collection의 끝을 확인.

. State문제
	. 만일 동일 Collection이 2개의 while loop에서 MoveNext()가 수행 될 경우 문제 발생.
	. loop시 Enumerator를 각각 받아와서 수행
	        Stack<int> stack = new Stack<int>();
            enumerator = stack.GetEnumerator()
            while (enumerator.MoveNext()) { }
	. Collection이 foreach문 안에서 갯수가 늘어나서는 안된다.(Compile에러 발생)

. Standard Query Operator
	. System.Linq.Enumerable의 확장 메서드를 통해서 기존에 IEnmerable을 구현한 Collection들은
	  Standard Query Operator를 사용할 수 있음.
	. Filtering with Where()
		. Collection의 Where Operator를 통하여 Filtering 수행
		. Where적용시에는 아직 Filter가 적용되기 전이며 실제 foreach가 수행될 때 Filter가 적용됨.
		. Where를 적용한 결과는 새로운 Collection.

		  IEnumerable<Inventor> inventors = InventorDataSet.Inventors;
		  inventors = inventors.Where(inventor => inventor.Name.StartsWith("K")); 

	. Projection with Select()
		. Collection의 내용을 투영하여 반복 작업 수행.
		. Filtering된 결과를 다시 이용하여 작업 가능.
		
		  IEnumerable<Inventor> inventors = InventorDataSet.Inventors;
          IEnumerable<Inventor> filterInventors = inventors.Where(inventor => inventor.Name.StartsWith("K"));
          IEnumerable<string> str = filterInventors.Select(inventor => inventor.ToString());
          var obj = filterInventors.Select(inventor => new { Name = inventor.Name, City = inventor.City });
	

		  	    