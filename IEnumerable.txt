. IEnumerable
	. Net에서 Collection이 되기 위해서는 최소한 IEnumerable을 구현해야 함.
	. IEnumerable을 구현하면 foreach를 사용하여 Collection을 탐색할 수 있음.
	. foreach문은 Compile시에 for문으로 대체 됨.
	. Array와 같이 길이를 알 수 없는 경우는 NextNext()와 같은 함수로 Collection의 끝을 확인.

. State문제
	. 만일 동일 Collection이 2개의 while loop에서 MoveNext()가 수행 될 경우 문제 발생.
	. loop시 Enumerator를 각각 받아와서 수행
	        Stack<int> stack = new Stack<int>();
            enumerator = stack.GetEnumerator()
            while (enumerator.MoveNext()) { }
	. Collection이 foreach문 안에서 갯수가 늘어나서는 안된다.(Compile에러 발생)

. Standard Query Operator
	. System.Linq.Enumerable의 확장 메서드를 통해서 기존에 IEnmerable을 구현한 Collection들은
	  Standard Query Operator를 사용할 수 있음.
	. Filtering with Where()
		. Collection의 Where Operator를 통하여 Filtering 수행
		. Where적용시에는 아직 Filter가 적용되기 전이며 실제 foreach가 수행될 때 Filter가 적용됨.
		. Where를 적용한 결과는 새로운 Collection.

		  IEnumerable<Inventor> inventors = InventorDataSet.Inventors;
		  inventors = inventors.Where(inventor => inventor.Name.StartsWith("K")); 

	. Projection with Select()
		. Collection의 내용을 투영하여 반복 작업 수행.
		. Filtering된 결과를 다시 이용하여 작업 가능.
		
		  IEnumerable<Inventor> inventors = InventorDataSet.Inventors;
          IEnumerable<Inventor> filterInventors = inventors.Where(inventor => inventor.Name.StartsWith("K"));
          IEnumerable<string> str = filterInventors.Select(inventor => inventor.ToString());
          var obj = filterInventors.Select(inventor => new { Name = inventor.Name, City = inventor.City });
	
	. Counting Elements with Count()
		. 조건에 맞는 갯수를 Return.
		. ICollection을 구현한 경우 Count()을 사용하면 내부적을 Count속성을 사용함.
		. ICollection을 구현하지 않은 IEnumerable은 loop를 돌면서 Count를 확인함.
		. 이럴 경우 단순히 0보다 큰 경우를 확인할 경우 Any()를 사용하는 것이 좋음.

		  Console.WriteLine(patents.Count(patent => patent.Title.EndsWith("1")));

	. Deferred Execution
		. LINQ에서 선언된 람다식은 선언시점에서는 수행되지 않고 다음과 같은 경우에 수행이 됨.
			. foreach문이 수행이 될 때
			. Count()가 호출 될 때
			. ToArray, ToDictionary와 같은 함수가 호출이 될 때
		. 람다식의 반복을 막기 위해서는 "To"함수를 이용하여 로컬 변수에 값을 할당하고, 로컬 변수를 사용.
	
	. Sorting with OrderBy() and ThenBy()
		. Collection의 정렬 수행.
		. OrderBy()를 통해서 1개의 컬럼으로 정렬 후, 그 결과에 ThenBy()를 통해서 다른 컬럼 정렬 수행.
		. OrderBy() 정렬 결과에 다시 OrderBy() 정렬을 수행하면 첫번째 OrderBy는 무시됨.
		. OrderByDescending(), ThenByDescending()

		  IEnumerable<Inventor> items;
          items = inventors.OrderBy(inventor => inventor.Name).ThenBy(
                inventor=> inventor.City);
	
	. Inner join with Join()
		. Collection간에 DB의 Inner Join을 수행
		

			Department[] departments = CorporateData.Departments;
			Employee[] employees = CorporateData.Employees;
			var items = employees.Join(
				departments,
				employee => employee.DepartmentId,
				department => department.Id,
				(employee, department) => new
				{
					employee.Id,
					employee.Name,
					employee.Title,
					Department = department
				});
	. Grouping Results with GroupBy()
		.  IGrouping<Grouping 항목의 Type, Group Element> Type을 Return.

			IEnumerable<IGrouping<string, Patent>> groupedPatent;
            groupedPatent = patents.GroupBy(patent => patent.YearOfPublication);

            foreach(IGrouping<string, Patent> group in groupedPatent)
            {
                
                foreach(Patent patent in group)
                {
                    Console.WriteLine(patent);
                }

                Console.WriteLine($"Count : {group.Count()}");
            }
	. One-To-Many Relationship with GroupJoin()
		. 2개의 Collection을 Join하여 1:n의 조합을 생성
		. Grouping하는 Collection을 trigger로 시작.
			var items = inventors.GroupJoin(
                patents, 
                (inventor) => inventor.Id,
                (patent) => patent.InventorIds,
                (inventor, patent) => new // (1:N)
                {
                    Name = inventor.Name,
                    City = inventor.City,
                    Patent = patent

                });
	. Calling SelectMany()
		.Collection(teams)안에 Collection(players)이 있는 경우 Collection(players)을 union all하여 
		  IEnumerable<T> return

			var teams = new[]
            {
                new
                {
                    Name = "Korea",
                    players = new string[]
                    {
                        "Kim","Moon"
                    }
                },
                new
                {
                    Name ="USA",
                    players = new string[]
                    {
                        "John","Tom"
                    }
                }
            };

            IEnumerable<string> player = teams.SelectMany(
                (team => team.players)
            );

            foreach(var item in player)
            {
                Console.WriteLine(item);
            }
	. 기타
		. ofType<T>()
			. collection에서 T type인 것만 Return
			   IEnumerable<int> items = stuff.ofType<int>(); //stuff collection에서 int type만 return
		. Union
		    . 두 collection을 합침. 중복 data는 하나만 표현.
			  IEnumerable<int> numbres = odd.Union(even);
		. Concat
			.